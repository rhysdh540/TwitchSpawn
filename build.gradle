plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

configurations {
    shade
}

repositories {
    mavenCentral()
    maven { url "https://maven.architectury.dev" }
    maven { url "https://mvn.devos.one/snapshots/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    include(implementation("com.squareup.okhttp3:okhttp:${okhttp_version}"))
    include(implementation("io.socket:socket.io-client:${socket_io_version}"))
    include(modImplementation("io.github.fabricators_of_create.Porting-Lib:networking:${porting_lib_version}")) {
        exclude group: "io.github.fabricators_of_create.Porting-Lib", module: "core"
    }

    include(implementation("com.electronwill.night-config:core:${night_config_version}"))
    include(implementation("com.electronwill.night-config:toml:${night_config_version}"))
}

processResources {
    def props = [
            version: version,
            minecraft_version: minecraft_version,
            loader_version: fabric_loader_version
    ]
    inputs.properties props
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand props +
                ['Client': '$Client', 'Server': '$Server'] // stop gradle from trying to expand inner class entrypoints
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

// i am so sorry


import com.google.gson.JsonPrimitive

import java.util.jar.JarFile
import java.util.jar.JarOutputStream
import java.util.jar.JarInputStream
import java.util.jar.JarEntry
import com.google.gson.JsonParser

remapJar {
    doLast {
        def jarFile = archiveFile.get().asFile
        def entries = new LinkedHashMap<String, byte[]>()
        def jar = new JarFile(jarFile)
        jar.stream().forEach { entry ->
            if(!entry.isDirectory()) {
                entries[entry.name] = jar.getInputStream(entry).bytes
            }
        }

        jar.close()
        jarFile.delete()

        entries.replaceAll { k, v ->
            if(k == "META-INF/jars/networking-${porting_lib_version}.jar") {
                v = processNetworkingJar(v)
            }
            return v
        }

        JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile))
        jos.setLevel(9)
        entries.each { k, v ->
            jos.putNextEntry(new JarEntry(k))
            jos.write(v)
            jos.closeEntry()
        }
        jos.finish()
        jos.close()
    }
}

def processNetworkingJar(byte[] bytes) {
    def is = new JarInputStream(new ByteArrayInputStream(bytes))
    def entries = new LinkedHashMap<String, byte[]>()

    while(true) {
        def entry = is.getNextJarEntry()
        if(entry == null) break
        if(entry.isDirectory()) continue
        entries[entry.name] = is.readAllBytes()
    }

    //remove nested porting_lib_core jar
    //open fabric.mod.json and remove "jars" entry

    entries.removeAll { it.key == "META-INF/jars/porting_lib_core-${porting_lib_version}.jar" }
    entries.replaceAll((k, v) -> {
        if (!k.endsWith(".json")) {
            return v
        }
        def json = JsonParser.parseString(new String(v)).getAsJsonObject()
        if(k == "fabric.mod.json") {
            json.remove("jars")
            json.get("depends").getAsJsonObject().add("minecraft", new JsonPrimitive(minecraft_version))
        }
        return json.toString().getBytes()
    })

    if(!entries.containsKey("META-INF/MANIFEST.MF")) {
        entries.put("META-INF/MANIFEST.MF", "Manifest-Version: 1.0\n".getBytes())
    }

    def bos = new ByteArrayOutputStream()
    JarOutputStream jos = new JarOutputStream(bos)
    entries.each { k, v ->
        jos.putNextEntry(new JarEntry(k))
        jos.write(v)
        jos.closeEntry()
    }
    jos.close()
    return bos.toByteArray()
}
